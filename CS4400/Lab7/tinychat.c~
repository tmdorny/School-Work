/*
 * tinychat.c - [Starting code for] a web-based chat server.
 *
 * Based on:
 *  tiny.c - A simple, iterative HTTP/1.0 Web server that uses the 
 *      GET method to serve static and dynamic content.
 *   Tiny Web server
 *   Dave O'Hallaron
 *   Carnegie Mellon University
 */
#include "csapp.h"
#include "dictionary.h"
#include "more_string.h"

void doit(int fd, dictionary_t * convos);
void *go_doit(void *coonfdp);
dictionary_t *read_requesthdrs(rio_t *rp);
void read_postquery(rio_t *rp, dictionary_t *headers, dictionary_t *d);
void parse_query(const char *uri, dictionary_t *d);
void serve_home_form(int fd, const char *pre_content);
void serve_form(int fd, const char *pre_content, dictionary_t *query, dictionary_t * convos);
void clienterror(int fd, char *cause, char *errnum, 
		 char *shortmsg, char *longmsg);
static void print_stringdictionary(dictionary_t *d);

typedef struct {
  int * connfdp;
  dictionary_t * convos;
} convo_struct;


int main(int argc, char **argv)
{
  int listenfd, connfd;
  char hostname[MAXLINE], port[MAXLINE];
  socklen_t clientlen;
  struct sockaddr_storage clientaddr;
  // Dictionary to hold all conversation strings

  /* Check command line args */
  if (argc != 2) {
    fprintf(stderr, "usage: %s <port>\n", argv[0]);
    exit(1);
  }

  listenfd = Open_listenfd(argv[1]);

  /* Don't kill the server if there's an error, because
     we want to survive errors due to a client. But we
     do want to report errors. */
  exit_on_error(0);

  /* Also, don't stop on broken connections: */
  Signal(SIGPIPE, SIG_IGN);

  // Create dictionary, not case sensitive
  convo_struct cs;
  cs.convos = make_dictionary(1, free);

  while (1) {
    clientlen = sizeof(clientaddr);
    connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen);
    if (connfd >= 0) {
      Getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE,
                  port, MAXLINE, 0);
      printf("Accepted connection from (%s, %s)\n", hostname, port);
      //convo_struct cs;
      //int *connfdp;
      //cs.connfdp = connfdp;

      pthread_t th;
      //connfdp = malloc(sizeof(int));
      cs.connfdp = malloc(sizeof(int));
      //*connfdp = connfd;
      *cs.connfdp = connfd;
      Pthread_create(&th, NULL, go_doit, (void *)&cs);
      Pthread_detach(th);
      //doit(connfd);
      //Close(connfd);
    }
  }
  free_dictionary(cs.convos);
}

void * go_doit(void * cs){
  convo_struct * cs2 = (convo_struct *)cs;
  //int connfd = *(int *)connfdp;
  int connfd = *(int *)cs2->connfdp;
  free(cs2->connfdp);
  doit(connfd, cs2->convos);
  Close(connfd);
  return NULL;
}

/*
 * doit - handle one HTTP request/response transaction
 */
void doit(int fd, dictionary_t * convos)
{
  char buf[MAXLINE], *method, *uri, *version;
  rio_t rio;
  dictionary_t *headers, *query;

  /* Read request line and headers */
  Rio_readinitb(&rio, fd);
  if (Rio_readlineb(&rio, buf, MAXLINE) <= 0)
    return;
  printf("%s", buf);

  if (!parse_request_line(buf, &method, &uri, &version)) {
    clienterror(fd, method, "400", "Bad Request",
                "TinyChat did not recognize the request");
  } else {
    if (strcasecmp(version, "HTTP/1.0")
        && strcasecmp(version, "HTTP/1.1")) {
      clienterror(fd, version, "501", "Not Implemented",
                  "TinyChat does not implement that version");
    } else if (strcasecmp(method, "GET")
               && strcasecmp(method, "POST")) {
      clienterror(fd, method, "501", "Not Implemented",
                  "TinyChat does not implement that method");
    } else {
      headers = read_requesthdrs(&rio);

      /* Parse all query arguments into a dictionary */
      query = make_dictionary(COMPARE_CASE_SENS, free);
      parse_uriquery(uri, query);
      if (!strcasecmp(method, "POST"))
        read_postquery(&rio, headers, query);

      /* For debugging, print the dictionary */
      print_stringdictionary(query);

      // DEBUG?TEST
      //printf("SOMETIHNG MAYBE CALL ME BABY: %s\n", dictionary_get(query, "content_name"));
      char * username = dictionary_get(query, "content_name");
      char * chat = dictionary_get(query, "content_chat");
      char * conv_name = dictionary_get(query, "content_conv");

      if (convos == NULL){
        printf("NULL SWAG");
      }

      // If chat was entered, add it to the dictionary
      if (chat != NULL){
        if (dictionary_get(convos, conv_name) == NULL) {
          //char * tmp = append_strings(username, " : ", chat, "\n", NULL);
          char * tmp = append_strings(username, " : ", chat, "<br>", NULL);
          char * concat = (char *) malloc(strlen(tmp) + 10);
          strcpy(concat, tmp);
          printf("SET: %s\n", concat);
          dictionary_set(convos, conv_name, concat);

        }
        else {
          char * tmp = append_strings((char *)dictionary_get(convos, conv_name), username, " : ", chat, "<br>", NULL);
          char * concat = (char *) malloc(strlen(tmp) + 10);
          strcpy(concat, tmp);
          dictionary_set(convos, conv_name, concat);
        }
      }

      /* If name has not been given, go to home page */
      if (username == NULL){
        serve_home_form(fd, "Welcome to TinyChat");
      }
      serve_form(fd, "lel", query, convos);

      /* Clean up */
      free_dictionary(query);
      free_dictionary(headers);
    }

    /* Clean up status line */
    free(method);
    free(uri);
    free(version);
  }
}

/*
 * read_requesthdrs - read HTTP request headers
 */
dictionary_t *read_requesthdrs(rio_t *rp)
{
  char buf[MAXLINE];
  dictionary_t *d = make_dictionary(COMPARE_CASE_INSENS, free);

  Rio_readlineb(rp, buf, MAXLINE);
  printf("%s", buf);
  while(strcmp(buf, "\r\n")) {
    Rio_readlineb(rp, buf, MAXLINE);
    printf("%s", buf);
    parse_header_line(buf, d);
  }
  
  return d;
}

void read_postquery(rio_t *rp, dictionary_t *headers, dictionary_t *dest)
{
  char *len_str, *type, *buffer;
  int len;
  
  len_str = dictionary_get(headers, "Content-Length");
  len = (len_str ? atoi(len_str) : 0);

  type = dictionary_get(headers, "Content-Type");
  
  buffer = malloc(len+1);
  Rio_readnb(rp, buffer, len);
  buffer[len] = 0;

  if (!strcasecmp(type, "application/x-www-form-urlencoded")) {
    parse_query(buffer, dest);
  }

  free(buffer);
}

static char *ok_header(size_t len, const char *content_type) {
  char *len_str, *header;
  
  header = append_strings("HTTP/1.0 200 OK\r\n",
                          "Server: TinyChat Web Server\r\n",
                          "Connection: close\r\n",
                          "Content-length: ", len_str = to_string(len), "\r\n",
                          "Content-type: ", content_type, "\r\n\r\n",
                          NULL);
  free(len_str);

  return header;
}
// Server home page for name and conversation ENTERING.....
void serve_home_form(int fd, const char *pre_content)
{
  size_t len;
  char *body, *header;

  body = append_strings("<html><body>\r\n",
                        "<p>Welcome to TinyChat bitch</p>",
                        "\r\n<form action=\"convo\" method=\"post\"",
                        " enctype=\"application/x-www-form-urlencoded\"",
                        " accept-charset=\"UTF-8\">\r\n",
                        "<p>Name: \n</p>",
                        "<input type=\"text\" name=\"content_name\">\r\n",
                        "<p>Desired Conversation: \n</p>",
                        "<input type=\"text\" name=\"content_conv\">\r\n",
                        "<p>\n</p>",
                        "<input type=\"submit\" value=\"SUBMIT\">\r\n",
                        "</form></body></html>\r\n",
                        NULL);

  len = strlen(body);

  /* Send response headers to client */
  header = ok_header(len, "text/html; charset=utf-8");
  Rio_writen(fd, header, strlen(header));
  printf("Response headers:\n");
  printf("%s", header);

  free(header);

  /* Send response body to client */
  Rio_writen(fd, body, len);

  free(body);
}

/*
 * serve_form - sends a form to a client
 */
void serve_form(int fd, const char *pre_content, dictionary_t *query, dictionary_t * convos)
{
  size_t len;
  char *body, *header, *name, *conv, *chat;
  name = dictionary_get(query, "content_name");
  conv = dictionary_get(query, "content_conv");
  chat = dictionary_get(convos, conv);
  printf("CHAT: %s\n", chat);

  if (chat != NULL){
    body = append_strings("<html><body>\r\n",
                        "<p>Welcome to TinyChat</p>",
                        "\r\n<form action=\"convo\" method=\"post\"",
                        " enctype=\"application/x-www-form-urlencoded\"",
                        " accept-charset=\"UTF-8\">\r\n",
                        "<p>Logged in as: ", conv, "\n</p>",
                        //"<input type=\"text\" name=\"content_name\">\r\n",
                        "<p>Current Conversation:", conv, "\n</p>",
                        "<input type=\"text\" name=\"content_chat\">\r\n",
                        "<p>\n</p>",
                        "<input type=\"submit\" value=\"SEND THE CHAT MESSAGE! KEEP IT CLEAN KIDS\">\r\n",
                        "<p> Chat vvv(temporary name)\n</p>",
                        "<p>", chat, "\n</p>",
                        "<input type=\"hidden\" name=\"content_name\" value=\"", name, "\">\r\n",
                        "<input type=\"hidden\" name=\"content_conv\" value=\"", conv, "\">\r\n",
                        "</form></body></html>\r\n",
                        NULL);
  }
  else {
    body = append_strings("<html><body>\r\n",
                        "<p>Welcome to TinyChat</p>",
                        "\r\n<form action=\"convo\" method=\"post\"",
                        " enctype=\"application/x-www-form-urlencoded\"",
                        " accept-charset=\"UTF-8\">\r\n",
                        "<p>Logged in as: ", conv, "\n</p>",
                        //"<input type=\"text\" name=\"content_name\">\r\n",
                        "<p>Current Conversation:", conv, "\n</p>",
                        "<input type=\"text\" name=\"content_chat\">\r\n",
                        "<p>\n</p>",
                        "<input type=\"submit\" value=\"SEND THE CHAT MESSAGE! KEEP IT CLEAN KIDS\">\r\n",
                        "<p> Chat vvv(temporary name)\n</p>",
                          //"<p>", chat, "\n</p>",
                        "<input type=\"hidden\" name=\"content_name\" value=\"", name, "\">\r\n",
                        "<input type=\"hidden\" name=\"content_conv\" value=\"", conv, "\">\r\n",
                        "</form></body></html>\r\n",
                        NULL);
  }
  len = strlen(body);

  /* Send response headers to client */
  header = ok_header(len, "text/html; charset=utf-8");
  Rio_writen(fd, header, strlen(header));
  printf("Response headers:\n");
  printf("%s", header);

  free(header);

  /* Send response body to client */
  Rio_writen(fd, body, len);

  free(body);
}

/*
 * clienterror - returns an error message to the client
 */
void clienterror(int fd, char *cause, char *errnum, 
		 char *shortmsg, char *longmsg) 
{
  size_t len;
  char *header, *body, *len_str;

  body = append_strings("<html><title>Tiny Error</title>",
                        "<body bgcolor=""ffffff"">\r\n",
                        errnum, " ", shortmsg,
                        "<p>", longmsg, ": ", cause,
                        "<hr><em>The Tiny Web server</em>\r\n",
                        NULL);
  len = strlen(body);

  /* Print the HTTP response */
  header = append_strings("HTTP/1.0 ", errnum, " ", shortmsg,
                          "Content-type: text/html; charset=utf-8\r\n",
                          "Content-length: ", len_str = to_string(len), "\r\n\r\n",
                          NULL);
  free(len_str);
  
  Rio_writen(fd, header, strlen(header));
  Rio_writen(fd, body, len);

  free(header);
  free(body);
}

static void print_stringdictionary(dictionary_t *d)
{
  int i, count;

  count = dictionary_count(d);
  for (i = 0; i < count; i++) {
    printf("%s=%s\n",
           dictionary_key(d, i),
           (const char *)dictionary_value(d, i));
  }
  printf("\n");
}
