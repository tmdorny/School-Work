<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
            <summary>
            (s1,t1) is an ordered pair of strings
            s1 depends on t1 --> t1 must be evaluated before s1
            
            A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
            (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
            (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
            set, and the element is already in the set, the set remains unchanged.)
            
            Given a DependencyGraph DG:
            
               (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                   
               (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
            /// </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               s depends on t
            
             </summary>
             <param name="s"> s cannot be evaluated until t is</param>
             <param name="t"> t must be evaluated first.  S depends on T</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.DependencyNode">
            <summary>
            Class used to handle dependent and dependee references for a graph class.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.#ctor(System.String)">
            <summary>
            Creates a new DependencyNode object with the specified name and empty dependent and dependee lists.
            </summary>
            <param name="s">String used for the "name of the node.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.getName">
            <summary>
            Returns the name variable of a node.
            </summary>
            <returns>String representing the node.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.getDependentStrings">
            <summary>
            Returns the list of dependents for a given node.
            </summary>
            <returns>List of dependent references.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.getDependeeStrings">
            <summary>
            Returns the list of dependees for a given node.
            </summary>
            <returns>List of dependee references.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.addDependent(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Adds the specified node to the reference node's dependents.
            </summary>
            <param name="n">Dependent node to be added</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.addDependee(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Adds the specified node to the reference node's dependees.
            </summary>
            <param name="n">Dependee node to be added.</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.isDependentOn(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Returns bool stating whether or not the given is dependent on the node passed into the method
            </summary>
            <param name="n">
            The node being checked for a dependent reference to the reference node.
            </param>
            <returns>Returns true if n contains a dependent reference to the reference node, false otherwise.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.getDependeeSize">
            <summary>
            Returns the number of dependee references found in the given node.
            </summary>
            <returns>Number of dependee references.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.getDependentSize">
            <summary>
            Returns the number of dependee references found in the given node.
            </summary>
            <returns>Number of dependee references.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.removeDependent(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Removes the specified dependent from the reference node assuming it exists.
            </summary>
            <param name="n">Dependent node to be removed.</param>
            <returns>Returns true if the dependent node is successfully removed, false otherwise.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.removeDependee(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Removes the specified dependee from the reference node assuming it exists.
            </summary>
            <param name="n">Dependee node to be removed.</param>
            <returns>Returns true if the dependee node is successfully removed, false otherwise.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.isDependeeOf(SpreadsheetUtilities.DependencyNode)">
            <summary>
            Returns bool stating whether or not the reference node is a dependee of the given node n.
            </summary>
            <param name="n">
            The node being checked for a dependee reference to the reference node.
            </param>
            <returns>Returns true if n contains a dependee reference to the reference node, false otherwise</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.clearDependents">
            <summary>
            Clears all dependent references (and their corresponding dependee references) from the reference node and returns the number of references that were cleared
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyNode.clearDependees">
            <summary>
            Clears all dependee references from the reference node and returns the number of references that were cleared
            </summary>
        </member>
    </members>
</doc>
