// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadSheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            WinClient uIItem5Client = this.UISpreadSheetPanelWindow.UIItemWindow.UIItem5Client;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(26, 43));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(57, 20));

            // Type '5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod1Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod1Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);

            // Click '5' client
            Mouse.Click(uIItem5Client, new Point(172, 46));

            // Type 'string' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod1Params.UICellContentsFieldEditText1;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod1Params.UICellContentsFieldEditSendKeys1, ModifierKeys.None);

            // Click '5' client
            Mouse.Click(uIItem5Client, new Point(230, 35));

            // Type '=5+5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod1Params.UICellContentsFieldEditText2;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod1Params.UICellContentsFieldEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            WinText uIItem5Text = this.UIItem5Window.UIItem5Text;
            #endregion

            // Verify that the 'ControlType' property of 'CellContentsField' text box equals 'Edit'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellContentsFieldEditControlType, uICellContentsFieldEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of '5' label equals 'Text'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem5TextControlType, uIItem5Text.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uINullClient = this.UISpreadSheetPanelWindow1.UIItemWindow.UINullClient;
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(41, 30));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(51, 11));

            // Click 'null' client
            Mouse.Click(uINullClient, new Point(76, 37));

            // Type '5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod2Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod2Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);

            // Click 'null' client
            Mouse.Click(uINullClient, new Point(123, 42));

            // Type 'test' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod2Params.UICellContentsFieldEditText1;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod2Params.UICellContentsFieldEditSendKeys1, ModifierKeys.None);

            // Click 'null' client
            Mouse.Click(uINullClient, new Point(225, 37));

            // Type '=5+5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod2Params.UICellContentsFieldEditText2;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod2Params.UICellContentsFieldEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsField' text box equals '5'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellContentsFieldEditText, uICellContentsFieldEdit.Text);

            // Verify that the 'Text' property of 'CellContentsField' text box equals 'test'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellContentsFieldEditText1, uICellContentsFieldEdit.Text);

            // Verify that the 'Text' property of 'CellContentsField' text box equals '=5+5'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellContentsFieldEditText2, uICellContentsFieldEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UICodeMeterCCWindow.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 9));
        }
        
        /// <summary>
        /// Enter5 - Use 'Enter5Params' to pass parameters into this method.
        /// </summary>
        public void Enter5()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(17, 38));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(52, 6));

            // Type '5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.Enter5Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.Enter5Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsField' text box equals '5'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UICellContentsFieldEditText, uICellContentsFieldEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uIItem5Client = this.UISpreadSheetPanelWindow.UIItemWindow.UIItem5Client;
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Click '5' client
            Mouse.Click(uIItem5Client, new Point(178, 41));

            // Type 'hi' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod4Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod4Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsField' text box equals 'hi'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICellContentsFieldEditText, uICellContentsFieldEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod5
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UIForm1Window.UIFileStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UICarefulWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(46, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(58, 15));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            WinClient uIItem5Client = this.UISpreadSheetPanelWindow.UIItemWindow.UIItem5Client;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(39, 39));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(11, 15));

            // Type '5' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod6Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod6Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);

            // Click '5' client
            Mouse.Click(uIItem5Client, new Point(136, 39));

            // Click '5' client
            Mouse.Click(uIItem5Client, new Point(92, 40));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UICodeMeterCCWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsField' text box equals '5'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellContentsFieldEditText, uICellContentsFieldEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIListItem = this.UIItemWindow.UIFolderViewWindow.UISpreadsheetGUIListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsFieldEdit = this.UIItemWindow.UICellContentsFieldWindow.UICellContentsFieldEdit;
            WinClient uIItem2Client = this.UISpreadSheetPanelWindow2.UIItemWindow.UIItem2Client;
            #endregion

            // Double-Click 'SpreadsheetGUI' list item
            Mouse.DoubleClick(uISpreadsheetGUIListItem, new Point(38, 30));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(25, 10));

            // Type '=1+1' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod7Params.UICellContentsFieldEditText;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod7Params.UICellContentsFieldEditSendKeys, ModifierKeys.None);

            // Click '2' client
            Mouse.Click(uIItem2Client, new Point(142, 45));

            // Type '=A1+3' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod7Params.UICellContentsFieldEditText1;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod7Params.UICellContentsFieldEditSendKeys1, ModifierKeys.None);

            // Click '2' client
            Mouse.Click(uIItem2Client, new Point(49, 37));

            // Type '=B1+1' in 'CellContentsField' text box
            uICellContentsFieldEdit.Text = this.RecordedMethod7Params.UICellContentsFieldEditText2;

            // Type '{Enter}' in 'CellContentsField' text box
            Keyboard.SendKeys(uICellContentsFieldEdit, this.RecordedMethod7Params.UICellContentsFieldEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinControl uIErrorDialog = this.UIErrorWindow.UIErrorDialog;
            #endregion

            // Verify that the 'Name' property of 'Error' Dialog equals 'Error'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIErrorDialogName, uIErrorDialog.Name);
        }
        
        /// <summary>
        /// Svae file
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIFileStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(64, 10));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Verify that the 'ControlType' property of '&Save' button equals 'Button'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UISaveButtonControlType, uISaveButton.ControlType.ToString());

            // Verify that the 'Name' property of '&Save' button equals 'Save'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UISaveButtonName, uISaveButton.Name);
        }
        
        /// <summary>
        /// Open help window
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UIForm1Window.UIFileStripMenuBar.UIFileMenuItem.UIHelpMenuItem;
            #endregion

            // Click 'File' -> 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(70, 7));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinText uIWelcometotheHelpmenuText = this.UIHelpWindowWindow.UIWelcometotheHelpmenuWindow.UIWelcometotheHelpmenuText;
            #endregion

            // Verify that the 'Name' property of 'Welcome to the Help menu. To select a cell, simply...' label equals 'Welcome to the Help menu.To select a cell, simply click on it.To change the contents of a cell, select the cell, enter the desired content into the textbox, and hit enter.Additional Feature:Copy and paste has been added. Right click a selected cell to open the copy/paste option.'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIWelcometotheHelpmenuTextName, uIWelcometotheHelpmenuText.Name);
        }
        
        /// <summary>
        /// RecordedMethod10
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIFileStripMenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(62, 9));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinEdit uICellContentsFieldEdit = this.UIItemWindow1.UICellContentsFieldWindow.UICellContentsFieldEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsField' text box equals ''
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UICellContentsFieldEditText, uICellContentsFieldEdit.Text);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual Enter5Params Enter5Params
        {
            get
            {
                if ((this.mEnter5Params == null))
                {
                    this.mEnter5Params = new Enter5Params();
                }
                return this.mEnter5Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UICodeMeterCCWindow UICodeMeterCCWindow
        {
            get
            {
                if ((this.mUICodeMeterCCWindow == null))
                {
                    this.mUICodeMeterCCWindow = new UICodeMeterCCWindow();
                }
                return this.mUICodeMeterCCWindow;
            }
        }
        
        public UISpreadSheetPanelWindow UISpreadSheetPanelWindow
        {
            get
            {
                if ((this.mUISpreadSheetPanelWindow == null))
                {
                    this.mUISpreadSheetPanelWindow = new UISpreadSheetPanelWindow();
                }
                return this.mUISpreadSheetPanelWindow;
            }
        }
        
        public UIItem5Window UIItem5Window
        {
            get
            {
                if ((this.mUIItem5Window == null))
                {
                    this.mUIItem5Window = new UIItem5Window();
                }
                return this.mUIItem5Window;
            }
        }
        
        public UISpreadSheetPanelWindow1 UISpreadSheetPanelWindow1
        {
            get
            {
                if ((this.mUISpreadSheetPanelWindow1 == null))
                {
                    this.mUISpreadSheetPanelWindow1 = new UISpreadSheetPanelWindow1();
                }
                return this.mUISpreadSheetPanelWindow1;
            }
        }
        
        public UIForm1Window1 UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window1();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UICarefulWindow UICarefulWindow
        {
            get
            {
                if ((this.mUICarefulWindow == null))
                {
                    this.mUICarefulWindow = new UICarefulWindow();
                }
                return this.mUICarefulWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadSheetPanelWindow2 UISpreadSheetPanelWindow2
        {
            get
            {
                if ((this.mUISpreadSheetPanelWindow2 == null))
                {
                    this.mUISpreadSheetPanelWindow2 = new UISpreadSheetPanelWindow2();
                }
                return this.mUISpreadSheetPanelWindow2;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIHelpWindowWindow UIHelpWindowWindow
        {
            get
            {
                if ((this.mUIHelpWindowWindow == null))
                {
                    this.mUIHelpWindowWindow = new UIHelpWindowWindow();
                }
                return this.mUIHelpWindowWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private Enter5Params mEnter5Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UICodeMeterCCWindow mUICodeMeterCCWindow;
        
        private UISpreadSheetPanelWindow mUISpreadSheetPanelWindow;
        
        private UIItem5Window mUIItem5Window;
        
        private UISpreadSheetPanelWindow1 mUISpreadSheetPanelWindow1;
        
        private UIForm1Window1 mUIForm1Window;
        
        private UICarefulWindow mUICarefulWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UISpreadSheetPanelWindow2 mUISpreadSheetPanelWindow2;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIHelpWindowWindow mUIHelpWindowWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'string' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText1 = "string";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=5+5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText2 = "=5+5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'CellContentsField' text box equals 'Edit'
        /// </summary>
        public string UICellContentsFieldEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '5' label equals 'Text'
        /// </summary>
        public string UIItem5TextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'test' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText1 = "test";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=5+5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText2 = "=5+5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals '5'
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals 'test'
        /// </summary>
        public string UICellContentsFieldEditText1 = "test";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals '=5+5'
        /// </summary>
        public string UICellContentsFieldEditText2 = "=5+5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals '5'
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'hi' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "hi";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals 'hi'
        /// </summary>
        public string UICellContentsFieldEditText = "hi";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals '5'
        /// </summary>
        public string UICellContentsFieldEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=1+1' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText = "=1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1+3' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText1 = "=A1+3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=B1+1' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditText2 = "=B1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsField' text box
        /// </summary>
        public string UICellContentsFieldEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Error' Dialog equals 'Error'
        /// </summary>
        public string UIErrorDialogName = "Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of '&Save' button equals 'Button'
        /// </summary>
        public string UISaveButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'Name' property of '&Save' button equals 'Save'
        /// </summary>
        public string UISaveButtonName = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Welcome to the Help menu. To select a cell, simply...' label equals 'Welcome to the Help menu.To select a cell, simply click on it.To change the contents of a cell, select the cell, enter the desired content into the textbox, and hit enter.Additional Feature:Copy and paste has been added. Right click a selected cell to open the copy/paste option.'
        /// </summary>
        public string UIWelcometotheHelpmenuTextName = @"Welcome to the Help menu.To select a cell, simply click on it.To change the contents of a cell, select the cell, enter the desired content into the textbox, and hit enter.Additional Feature:Copy and paste has been added. Right click a selected cell to open the copy/paste option.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsField' text box equals ''
        /// </summary>
        public string UICellContentsFieldEditText = "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICodeMeterCCWindow : WinWindow
    {
        
        public UICodeMeterCCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CodeMeterCC";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public UICellContentsFieldWindow UICellContentsFieldWindow
        {
            get
            {
                if ((this.mUICellContentsFieldWindow == null))
                {
                    this.mUICellContentsFieldWindow = new UICellContentsFieldWindow(this);
                }
                return this.mUICellContentsFieldWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window(this);
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsFieldWindow mUICellContentsFieldWindow;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsFieldWindow : WinWindow
    {
        
        public UICellContentsFieldWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentsField";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsFieldEdit
        {
            get
            {
                if ((this.mUICellContentsFieldEdit == null))
                {
                    this.mUICellContentsFieldEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsFieldEdit.WindowTitles.Add("CodeMeterCC");
                    #endregion
                }
                return this.mUICellContentsFieldEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsFieldEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIForm1TitleBar mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("CodeMeterCC");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadSheetPanelWindow : WinWindow
    {
        
        public UISpreadSheetPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "5";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIItem5Client
        {
            get
            {
                if ((this.mUIItem5Client == null))
                {
                    this.mUIItem5Client = new WinClient(this);
                }
                return this.mUIItem5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItem5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem5Window : WinWindow
    {
        
        public UIItem5Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "5";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("5");
            #endregion
        }
        
        #region Properties
        public WinText UIItem5Text
        {
            get
            {
                if ((this.mUIItem5Text == null))
                {
                    this.mUIItem5Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem5Text.SearchProperties[WinText.PropertyNames.Name] = "5";
                    this.mUIItem5Text.WindowTitles.Add("5");
                    #endregion
                }
                return this.mUIItem5Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem5Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadSheetPanelWindow1 : WinWindow
    {
        
        public UISpreadSheetPanelWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "null";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UINullClient
        {
            get
            {
                if ((this.mUINullClient == null))
                {
                    this.mUINullClient = new WinClient(this);
                }
                return this.mUINullClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINullClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window1 : WinWindow
    {
        
        public UIForm1Window1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIFileStripMenuBar UIFileStripMenuBar
        {
            get
            {
                if ((this.mUIFileStripMenuBar == null))
                {
                    this.mUIFileStripMenuBar = new UIFileStripMenuBar(this);
                }
                return this.mUIFileStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIFileStripMenuBar mUIFileStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileStripMenuBar : WinMenuBar
    {
        
        public UIFileStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "FileStrip";
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICarefulWindow : WinWindow
    {
        
        public UICarefulWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Careful";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Careful");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Careful");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Careful");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        
        public UICellContentsFieldWindow1 UICellContentsFieldWindow
        {
            get
            {
                if ((this.mUICellContentsFieldWindow == null))
                {
                    this.mUICellContentsFieldWindow = new UICellContentsFieldWindow1(this);
                }
                return this.mUICellContentsFieldWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        
        private UICellContentsFieldWindow1 mUICellContentsFieldWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIListItem == null))
                {
                    this.mUISpreadsheetGUIListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI";
                    #endregion
                }
                return this.mUISpreadsheetGUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsFieldWindow1 : WinWindow
    {
        
        public UICellContentsFieldWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentsField";
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsFieldEdit
        {
            get
            {
                if ((this.mUICellContentsFieldEdit == null))
                {
                    this.mUICellContentsFieldEdit = new WinEdit(this);
                }
                return this.mUICellContentsFieldEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsFieldEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadSheetPanelWindow2 : WinWindow
    {
        
        public UISpreadSheetPanelWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIItem2Client
        {
            get
            {
                if ((this.mUIItem2Client == null))
                {
                    this.mUIItem2Client = new WinClient(this);
                }
                return this.mUIItem2Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItem2Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinControl UIErrorDialog
        {
            get
            {
                if ((this.mUIErrorDialog == null))
                {
                    this.mUIErrorDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIErrorDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Error";
                    this.mUIErrorDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIErrorDialog.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIErrorDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIErrorDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpWindowWindow : WinWindow
    {
        
        public UIHelpWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help Window";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help Window");
            #endregion
        }
        
        #region Properties
        public UIWelcometotheHelpmenuWindow UIWelcometotheHelpmenuWindow
        {
            get
            {
                if ((this.mUIWelcometotheHelpmenuWindow == null))
                {
                    this.mUIWelcometotheHelpmenuWindow = new UIWelcometotheHelpmenuWindow(this);
                }
                return this.mUIWelcometotheHelpmenuWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWelcometotheHelpmenuWindow mUIWelcometotheHelpmenuWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWelcometotheHelpmenuWindow : WinWindow
    {
        
        public UIWelcometotheHelpmenuWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help Window");
            #endregion
        }
        
        #region Properties
        public WinText UIWelcometotheHelpmenuText
        {
            get
            {
                if ((this.mUIWelcometotheHelpmenuText == null))
                {
                    this.mUIWelcometotheHelpmenuText = new WinText(this);
                    #region Search Criteria
                    this.mUIWelcometotheHelpmenuText.SearchProperties[WinText.PropertyNames.Name] = @"Welcome to the Help menu.To select a cell, simply click on it.To change the contents of a cell, select the cell, enter the desired content into the textbox, and hit enter.Additional Feature:Copy and paste has been added. Right click a selected cell to open the copy/paste option.";
                    this.mUIWelcometotheHelpmenuText.WindowTitles.Add("Help Window");
                    #endregion
                }
                return this.mUIWelcometotheHelpmenuText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWelcometotheHelpmenuText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UICellContentsFieldWindow2 UICellContentsFieldWindow
        {
            get
            {
                if ((this.mUICellContentsFieldWindow == null))
                {
                    this.mUICellContentsFieldWindow = new UICellContentsFieldWindow2(this);
                }
                return this.mUICellContentsFieldWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsFieldWindow2 mUICellContentsFieldWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsFieldWindow2 : WinWindow
    {
        
        public UICellContentsFieldWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentsField";
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsFieldEdit
        {
            get
            {
                if ((this.mUICellContentsFieldEdit == null))
                {
                    this.mUICellContentsFieldEdit = new WinEdit(this);
                }
                return this.mUICellContentsFieldEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsFieldEdit;
        #endregion
    }
}
